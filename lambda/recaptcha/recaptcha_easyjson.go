// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package recaptcha

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha(in *jlexer.Lexer, out *recaptchaResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "challenge_ts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChallengeTS).UnmarshalJSON(data))
			}
		case "hostname":
			out.Hostname = string(in.String())
		case "error-codes":
			if in.IsNull() {
				in.Skip()
				out.ErrorCodes = nil
			} else {
				in.Delim('[')
				if out.ErrorCodes == nil {
					if !in.IsDelim(']') {
						out.ErrorCodes = make([]string, 0, 4)
					} else {
						out.ErrorCodes = []string{}
					}
				} else {
					out.ErrorCodes = (out.ErrorCodes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ErrorCodes = append(out.ErrorCodes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha(out *jwriter.Writer, in recaptchaResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"success\":")
	out.Bool(bool(in.Success))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"challenge_ts\":")
	out.Raw((in.ChallengeTS).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"error-codes\":")
	if in.ErrorCodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.ErrorCodes {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v recaptchaResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v recaptchaResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *recaptchaResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *recaptchaResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha(l, v)
}
func easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha1(in *jlexer.Lexer, out *Instance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha1(out *jwriter.Writer, in Instance) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Instance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Instance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson422e45f5EncodeGithubComMstojcevichLambdaNgGoRecaptcha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Instance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Instance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson422e45f5DecodeGithubComMstojcevichLambdaNgGoRecaptcha1(l, v)
}
